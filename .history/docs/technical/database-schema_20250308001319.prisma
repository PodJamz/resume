// Database schema for the AI-powered resume builder
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id               String            @id @default(cuid())
  userId           String
  title            String
  targetRole       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  originalFileName String?
  originalFileType String?
  fileStoragePath  String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions         ResumeVersion[]
  sections         ResumeSection[]
  interactions     AIInteraction[]
  
  @@index([userId])
}

model ResumeVersion {
  id        String   @id @default(cuid())
  resumeId  String
  versionNo Int
  createdAt DateTime @default(now())
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  sections  Json     // Stores a snapshot of all sections at this version
  
  @@index([resumeId])
  @@unique([resumeId, versionNo])
}

model ResumeSection {
  id       String @id @default(cuid())
  resumeId String
  type     SectionType
  content  Json
  order    Int
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  @@index([resumeId])
}

enum SectionType {
  CONTACT
  SUMMARY
  EXPERIENCE
  EDUCATION
  SKILLS
  PROJECTS
  CERTIFICATIONS
  CUSTOM
}

model AIInteraction {
  id          String   @id @default(cuid())
  resumeId    String
  userMessage String   @db.Text
  aiResponse  String   @db.Text
  timestamp   DateTime @default(now())
  changesMade Json?    // Tracks which sections were modified
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  @@index([resumeId])
} 